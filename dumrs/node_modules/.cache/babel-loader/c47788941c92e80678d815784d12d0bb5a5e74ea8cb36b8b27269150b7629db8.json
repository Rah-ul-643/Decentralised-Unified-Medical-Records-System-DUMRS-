{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\shreesh\\\\Desktop\\\\vs code\\\\c programming\\\\DUMRS\\\\dumrs\\\\src\\\\components\\\\graph\\\\index.js\";\nimport React from 'react';\nimport { Line } from 'react-chartjs-2';\nimport { Chart as ChartJS, CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Filler, Legend } from 'chart.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nChartJS.register(CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Filler, Legend);\nconst years = Array.from({\n  length: 26\n}, (_, i) => 2000 + i);\nconst generateSmoothBloodSugar = prevValue => {\n  const change = Math.random() * 20 - 10; // Random change between -10 and 10\n  const newValue = prevValue + change;\n  return Math.max(70, Math.min(180, newValue)); // Keep within 70-180 range\n};\nconst bloodSugarData = [125]; // Start with an average value\nfor (let i = 1; i < years.length; i++) {\n  bloodSugarData.push(generateSmoothBloodSugar(bloodSugarData[i - 1]));\n}\nconst data = {\n  labels: years,\n  datasets: [{\n    label: 'Blood Sugar Level (mg/dL)',\n    data: bloodSugarData,\n    borderColor: 'rgba(138, 43, 226, 1)',\n    // Purple color\n    backgroundColor: 'rgba(138, 43, 226, 0.1)',\n    fill: true,\n    tension: 0.4,\n    pointRadius: 3,\n    // Small but visible points\n    pointBackgroundColor: 'rgba(138, 43, 226, 1)',\n    pointBorderColor: 'white',\n    pointBorderWidth: 1,\n    pointHoverRadius: 9,\n    pointHoverBackgroundColor: 'rgba(138, 43, 226, 1)',\n    pointHoverBorderColor: 'white',\n    pointHoverBorderWidth: 2\n  }]\n};\n\n// const gradientPlugin = {\n//   id: 'customCanvasBackgroundColor',\n//   beforeDraw: (chart, args, options) => {\n//     const {ctx, chartArea} = chart;\n//     if (!chartArea) {\n//       return;\n//     }\n//     const gradientFill = ctx.createLinearGradient(0, chartArea.bottom, 0, chartArea.top);\n//     gradientFill.addColorStop(0, 'rgba(138, 43, 226, 0)');\n//     gradientFill.addColorStop(1, 'rgba(138, 43, 226, 0.2)');\n\n//     ctx.fillStyle = gradientFill;\n//     ctx.fillRect(chartArea.left, chartArea.top, chartArea.right - chartArea.left, chartArea.bottom - chartArea.top);\n//   }\n// };\n\nexport function Graph() {\n  const options = {\n    responsive: true,\n    plugins: {\n      legend: {\n        display: false\n      },\n      tooltip: {\n        backgroundColor: 'white',\n        titleColor: 'black',\n        bodyColor: 'black',\n        borderColor: 'lightgrey',\n        borderWidth: 1,\n        padding: 10,\n        displayColors: false,\n        callbacks: {\n          title: context => `Year: ${context[0].label}`,\n          label: context => `Blood Sugar: ${context.parsed.y.toFixed(0)} mg/dL`\n        }\n      }\n    },\n    scales: {\n      x: {\n        grid: {\n          display: false\n        },\n        ticks: {\n          font: {\n            size: 10\n          },\n          maxRotation: 0,\n          autoSkip: true,\n          maxTicksLimit: 6\n        }\n      },\n      y: {\n        beginAtZero: false,\n        suggestedMin: 60,\n        suggestedMax: 190,\n        grid: {\n          color: 'rgba(0, 0, 0, 0.05)'\n        },\n        ticks: {\n          font: {\n            size: 10\n          },\n          stepSize: 30\n        }\n      }\n    },\n    elements: {\n      line: {\n        cubicInterpolationMode: 'monotone'\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      width: \"100%\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Blood Sugar Level Over the years\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 8\n    }, this), /*#__PURE__*/_jsxDEV(Line, {\n      options: options,\n      data: data\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 8\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 136,\n    columnNumber: 5\n  }, this);\n}\n_c = Graph;\nvar _c;\n$RefreshReg$(_c, \"Graph\");","map":{"version":3,"names":["React","Line","Chart","ChartJS","CategoryScale","LinearScale","PointElement","LineElement","Title","Tooltip","Filler","Legend","jsxDEV","_jsxDEV","register","years","Array","from","length","_","i","generateSmoothBloodSugar","prevValue","change","Math","random","newValue","max","min","bloodSugarData","push","data","labels","datasets","label","borderColor","backgroundColor","fill","tension","pointRadius","pointBackgroundColor","pointBorderColor","pointBorderWidth","pointHoverRadius","pointHoverBackgroundColor","pointHoverBorderColor","pointHoverBorderWidth","Graph","options","responsive","plugins","legend","display","tooltip","titleColor","bodyColor","borderWidth","padding","displayColors","callbacks","title","context","parsed","y","toFixed","scales","x","grid","ticks","font","size","maxRotation","autoSkip","maxTicksLimit","beginAtZero","suggestedMin","suggestedMax","color","stepSize","elements","line","cubicInterpolationMode","style","width","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/shreesh/Desktop/vs code/c programming/DUMRS/dumrs/src/components/graph/index.js"],"sourcesContent":["import React from 'react';\r\nimport { Line } from 'react-chartjs-2';\r\nimport {\r\n  Chart as ChartJS,\r\n  CategoryScale,\r\n  LinearScale,\r\n  PointElement,\r\n  LineElement,\r\n  Title,\r\n  Tooltip,\r\n  Filler,\r\n  Legend\r\n} from 'chart.js';\r\n\r\nChartJS.register(\r\n  CategoryScale,\r\n  LinearScale,\r\n  PointElement,\r\n  LineElement,\r\n  Title,\r\n  Tooltip,\r\n  Filler,\r\n  Legend\r\n);\r\n\r\nconst years = Array.from({ length: 26 }, (_, i) => 2000 + i);\r\n\r\nconst generateSmoothBloodSugar = (prevValue) => {\r\n  const change = Math.random() * 20 - 10; // Random change between -10 and 10\r\n  const newValue = prevValue + change;\r\n  return Math.max(70, Math.min(180, newValue)); // Keep within 70-180 range\r\n};\r\n\r\nconst bloodSugarData = [125]; // Start with an average value\r\nfor (let i = 1; i < years.length; i++) {\r\n  bloodSugarData.push(generateSmoothBloodSugar(bloodSugarData[i-1]));\r\n}\r\n\r\nconst data = {\r\n    labels: years,\r\n    datasets: [\r\n      {\r\n        label: 'Blood Sugar Level (mg/dL)',\r\n        data: bloodSugarData,\r\n        borderColor: 'rgba(138, 43, 226, 1)', // Purple color\r\n        backgroundColor: 'rgba(138, 43, 226, 0.1)',\r\n        fill: true,\r\n        tension: 0.4,\r\n        pointRadius: 3, // Small but visible points\r\n        pointBackgroundColor: 'rgba(138, 43, 226, 1)',\r\n        pointBorderColor: 'white',\r\n        pointBorderWidth: 1,\r\n        pointHoverRadius: 9,\r\n        pointHoverBackgroundColor: 'rgba(138, 43, 226, 1)',\r\n        pointHoverBorderColor: 'white',\r\n        pointHoverBorderWidth: 2,\r\n      },\r\n    ],\r\n  };\r\n\r\n// const gradientPlugin = {\r\n//   id: 'customCanvasBackgroundColor',\r\n//   beforeDraw: (chart, args, options) => {\r\n//     const {ctx, chartArea} = chart;\r\n//     if (!chartArea) {\r\n//       return;\r\n//     }\r\n//     const gradientFill = ctx.createLinearGradient(0, chartArea.bottom, 0, chartArea.top);\r\n//     gradientFill.addColorStop(0, 'rgba(138, 43, 226, 0)');\r\n//     gradientFill.addColorStop(1, 'rgba(138, 43, 226, 0.2)');\r\n    \r\n//     ctx.fillStyle = gradientFill;\r\n//     ctx.fillRect(chartArea.left, chartArea.top, chartArea.right - chartArea.left, chartArea.bottom - chartArea.top);\r\n//   }\r\n// };\r\n\r\nexport function Graph() {\r\n  const options = {\r\n    responsive: true,\r\n    plugins: {\r\n      legend: {\r\n        display: false,\r\n      },\r\n      tooltip: {\r\n        backgroundColor: 'white',\r\n        titleColor: 'black',\r\n        bodyColor: 'black',\r\n        borderColor: 'lightgrey',\r\n        borderWidth: 1,\r\n        padding: 10,\r\n        displayColors: false,\r\n        callbacks: {\r\n          title: (context) => `Year: ${context[0].label}`,\r\n          label: (context) => `Blood Sugar: ${context.parsed.y.toFixed(0)} mg/dL`,\r\n        },\r\n        \r\n      },\r\n    },\r\n    scales: {\r\n      x: {\r\n        grid: {\r\n          display: false,\r\n        },\r\n        ticks: {\r\n          font: {\r\n            size: 10,\r\n          },\r\n          maxRotation: 0,\r\n          autoSkip: true,\r\n          maxTicksLimit: 6,\r\n        },\r\n      },\r\n      y: {\r\n        beginAtZero: false,\r\n        suggestedMin: 60,\r\n        suggestedMax: 190,\r\n        grid: {\r\n          color: 'rgba(0, 0, 0, 0.05)',\r\n        },\r\n        ticks: {\r\n          font: {\r\n            size: 10,\r\n          },\r\n          stepSize: 30,\r\n        },\r\n      },\r\n    },\r\n    elements: {\r\n      line: {\r\n        cubicInterpolationMode: 'monotone',\r\n      },\r\n    },\r\n  };\r\n\r\n  return (\r\n    <div style={{width:\"100%\"}}>\r\n       <h2>Blood Sugar Level Over the years</h2>\r\n       <Line options={options} data={data}  />\r\n    </div>\r\n  )\r\n   \r\n  \r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}